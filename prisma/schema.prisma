generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Source {
  id          String   @id @default(cuid())
  name        String
  type        SourceType
  url         String?
  credentials Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  channels    Channel[]
  movies      Movie[]
  series      Series[]
  
  @@map("sources")
}

model Channel {
  id          String   @id @default(cuid())
  name        String
  url         String
  logo        String?
  group       String?
  country     String?
  language    String?
  category    String?
  isActive    Boolean  @default(true)
  quality     Quality?
  sourceId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  source      Source   @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  
  @@map("channels")
}

model Movie {
  id          String   @id @default(cuid())
  title       String
  originalTitle String?
  year        Int?
  url         String
  poster      String?
  backdrop    String?
  overview    String?
  genre       String[]
  rating      Float?
  duration    Int?
  quality     Quality?
  language    String?
  country     String?
  director    String?
  cast        String[]
  tmdbId      Int?
  imdbId      String?
  sourceId    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  source      Source   @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  
  @@map("movies")
}

model Series {
  id          String   @id @default(cuid())
  title       String
  originalTitle String?
  year        Int?
  poster      String?
  backdrop    String?
  overview    String?
  genre       String[]
  rating      Float?
  status      SeriesStatus?
  language    String?
  country     String?
  creator     String?
  cast        String[]
  tmdbId      Int?
  imdbId      String?
  sourceId    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  source      Source   @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  seasons     Season[]
  
  @@map("series")
}

model Season {
  id          String   @id @default(cuid())
  seasonNumber Int
  name        String?
  overview    String?
  poster      String?
  airDate     DateTime?
  episodeCount Int?
  seriesId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  series      Series    @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  episodes    Episode[]
  
  @@unique([seriesId, seasonNumber])
  @@map("seasons")
}

model Episode {
  id            String   @id @default(cuid())
  episodeNumber Int
  name          String?
  overview      String?
  url           String
  still         String?
  airDate       DateTime?
  duration      Int?
  quality       Quality?
  seasonId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  season        Season   @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  
  @@unique([seasonId, episodeNumber])
  @@map("episodes")
}

model ScanLog {
  id        String   @id @default(cuid())
  sourceId  String
  status    ScanStatus
  message   String?
  itemsFound Int     @default(0)
  itemsProcessed Int @default(0)
  errors    Json?
  startedAt DateTime @default(now())
  completedAt DateTime?
  
  @@map("scan_logs")
}

enum SourceType {
  M3U
  M3U8
  XTREAM_CODES
  LOCAL_FILE
}

enum Quality {
  SD
  HD
  FHD
  UHD_4K
  UHD_8K
}

enum SeriesStatus {
  RETURNING
  ENDED
  CANCELED
  IN_PRODUCTION
}

enum ScanStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}